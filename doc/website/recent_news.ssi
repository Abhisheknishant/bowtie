<h2>1.2.1.1 - 06/13/2017</h2>
<ul>
    <li>Fixed an issue causing Bowtie to segfault when processing reads from stdin</li>
</ul>

<h2>1.2.1 - 06/12/2017</h2>
<p>Please note that Bowtie will be switching to the Artistic 2.0 license in the next release.<br/>
Pre-build binaries now include statically linked TBB and zlib libraries no longer requiring that
these libraries be pre-installed.</p>
<ul>
    <li>Fixed an issue which caused Bowtie to hang during parallell index building when running an optimized binary</li>
    <li>Deprecated <tt>--refout</tt> option.  It will be fully removed in the next release</li>
    <li>Added parallel index building with the bowtie2-build <tt><a href="manual.shtml#bowtie-build-options-threads">--threads</a></tt> option (credit to <a href="https://github.com/aidanreilly8">Aidan Reilly</a>)</li>
    <li>Added native support for gzipped read files.  The wrapper script is no longer responsible for this, which simplifies the wrapper and improves speed and thread scaling.</li>
    <li>Added support for interleaved paired-end FASTQ inputs (<tt><a href="manual.shtml#command-line">--interleaved</a></tt>)</li>
    <li>Fixed issue where first character of some read names was omitted from SAM output when using tabbed input formats</li>
    <li>Fixed issue that caused Bowtie to hang when aligning FASTA inputs with more than one thread</li>
    <li>Bowtie wrapper now works even when invoked via a symlink in a different directory from the executables</li>
    <li>Fixed issue preventing reading <tt><a href="manual.shtml#command-line">--12</a></tt> input on stdin</li>
    <li>Added <tt><a href="manual.shtml#bowtie-options-no-unal">--no-unal</a></tt> option for suppressing unmapped reads in SAM output</li>
</ul>

<h2>1.2.0 - 12/12/2016</h2>
<p>This is a major release with some larger and many smaller changes.  These notes emphasize the large changes.  See commit history for details.</p>
<ul>
    <li>Code related to read parsing was completely rewritten to improve scalability to many threads.  In short, the critical section is simpler and parses input reads in batches rather than one at a time.  The improvement applies to all read formats.</li>
    <li><tt><a href="manual.shtml#bowtie-options-reads-per-batch">--reads-per-batch</a></tt> command line parameter added to specify the number of reads to read from the input file at once</li>
    <li>TBB is now the default threading library.  We consistently found TBB to give superior thread scaling.  It is widely available and widely installed.  That said, we are also preserving a "legacy" version of Bowtie that, like previous releases, does not use TBB.  To compile Bowtie source in legacy mode use <tt>NO_TBB=1</tt>.  To use legacy binaries, download the appropriate binary archive with "legacy" in the name.</li>
    <li>Bowtie now uses a queue-based lock rather than a spin or heavyweight lock.  We find this gives superior thread scaling; we saw an order-of-magnitude throughput improvements at 120 threads in one experiment, for example.</li>
    <li>Unnecessary thread synchronization removed</li>
    <li>Fixed colorspace parsing when primer base is present</li>
    <li>Fixed bugs related to <tt><a href="manual.shtml#bowtie-options-s">--skip</a></tt> command line option</li>
</ul>

<h2>1.1.2 - 6/23/2015</h2>
<ul>
   <li>  Fixed the building process for Mac OS X Yosemite.</li>
   <li>  Added <tt>install</tt> target (<tt>make install</tt>) for Linux to better aid package building process and the overall installation process.</li>
   <li>  Added support for Intel TBB threading, providing better thread scaling in most situations. The default build still uses <a href="http://tinythreadpp.bitsnbites.eu">TinyThread</a> but TBB is used with <tt>make WITH_TBB=1</tt>.</li>
   <li>  Fixed minor issue related with managing the number of threads spawned.</li>
   <li>  Fixed minor issue which may have caused a memory leak after an exception was thrown.</li>
   <li>  Fixed bug that caused bowtie to crash if a read was trimmed more than the read's length on 5' end.</li>
   <li>  Added minor corrections/addition to the manual.</li>
   <li>  Fixed bug that caused the wrapper to incorrectly identify the bowtie binary.</li>
</ul>

<h2>Lighter released</h2>
<ul>
   <li>Lighter is an extremely fast and memory-efficient program for correcting sequencing errors in DNA sequencing data.  For details on how error correction can help improve the speed and accuracy of downstream analysis tools, see the <a href="http://genomebiology.com/2014/15/11/509">paper in Genome Biology</a>.  Source and software <a href="https://github.com/mourisl/Lighter">available at GitHub</a>.
</ul>

<h2>1.1.1 - 10/1/2014</h2>
<ul>
   <li> Fixed a compiling linkage problem related with Mac OS X Mavericks.</li>
   <li> Improved performance for cases where the reference contains many stretches of Ns.</li>
   <li> Some minor automatic tests updates.</li>
</ul>


<h2>1.1.0 - 7/19/2014</h2>
<ul>
   <li> Added support for large and small indexes, removing 4-billion-nucleotide
     barrier.  Bowtie can now be used with reference genomes of any size.</li>
   <li> No longer releasing 32-bit binaries. Simplified manual and Makefile accordingly.</li>
   <li> Phased out CygWin support.</li>
   <li> Improved efficiency of index files loading.</li>
   <li> Fixed a bug that made <tt>bowtie-inspect</tt> fail in some situations.</li>
   <li> (This release was briefly given version number 2.0.0, but we changed it to 1.1.0
        to avoid confusion with Bowtie 2.)</li>
</ul>

<h2>1.0.1 release - 3/14/2014</h2>
<ul>
 <li>Improved index querying efficiency using "population count" instructions
     available since SSE4.2.</li>
 <li>Credits to the Intel(r) enabling team for performance optimizations
     included in this release.  Thank you!</li>
</ul>

<h2>Bowtie on GitHub - 4/11/13</h2>
<ul>
 <li>Bowtie source now lives in a <a href="https://github.com/BenLangmead/bowtie">public GitHub repository</a>.</li>
</ul>

